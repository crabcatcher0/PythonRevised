[
    {
        "label": "isEven",
        "kind": 2,
        "importPath": "basic.Functions.filter",
        "description": "basic.Functions.filter",
        "peekOfCode": "def isEven(x): #check is a num is even or not\n    if x % 2 == 0: # if the remainder is 0\n        return True\n    else:\n        return False\ndata = list(filter(isEven, a))\nprint(data) #output: [2, 4, 6, 8, 10]\n#using lambda function\nlam_data = list(filter(lambda x: x % 2 == 0, a))\nprint(lam_data) #output: [2, 4, 6, 8, 10]",
        "detail": "basic.Functions.filter",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.Functions.filter",
        "description": "basic.Functions.filter",
        "peekOfCode": "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ndef isEven(x): #check is a num is even or not\n    if x % 2 == 0: # if the remainder is 0\n        return True\n    else:\n        return False\ndata = list(filter(isEven, a))\nprint(data) #output: [2, 4, 6, 8, 10]\n#using lambda function\nlam_data = list(filter(lambda x: x % 2 == 0, a))",
        "detail": "basic.Functions.filter",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "basic.Functions.filter",
        "description": "basic.Functions.filter",
        "peekOfCode": "data = list(filter(isEven, a))\nprint(data) #output: [2, 4, 6, 8, 10]\n#using lambda function\nlam_data = list(filter(lambda x: x % 2 == 0, a))\nprint(lam_data) #output: [2, 4, 6, 8, 10]",
        "detail": "basic.Functions.filter",
        "documentation": {}
    },
    {
        "label": "lam_data",
        "kind": 5,
        "importPath": "basic.Functions.filter",
        "description": "basic.Functions.filter",
        "peekOfCode": "lam_data = list(filter(lambda x: x % 2 == 0, a))\nprint(lam_data) #output: [2, 4, 6, 8, 10]",
        "detail": "basic.Functions.filter",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "basic.Functions.fun",
        "description": "basic.Functions.fun",
        "peekOfCode": "def add(a, b):\n    sum = a + b\n    return sum\nans = add(1, 4)\nprint(ans)\ndef call(name):\n    message = \"hello \" + name\n    return message\ngreet = call(\"Ram\")\nprint(greet)",
        "detail": "basic.Functions.fun",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "basic.Functions.fun",
        "description": "basic.Functions.fun",
        "peekOfCode": "def call(name):\n    message = \"hello \" + name\n    return message\ngreet = call(\"Ram\")\nprint(greet)",
        "detail": "basic.Functions.fun",
        "documentation": {}
    },
    {
        "label": "ans",
        "kind": 5,
        "importPath": "basic.Functions.fun",
        "description": "basic.Functions.fun",
        "peekOfCode": "ans = add(1, 4)\nprint(ans)\ndef call(name):\n    message = \"hello \" + name\n    return message\ngreet = call(\"Ram\")\nprint(greet)",
        "detail": "basic.Functions.fun",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 5,
        "importPath": "basic.Functions.fun",
        "description": "basic.Functions.fun",
        "peekOfCode": "greet = call(\"Ram\")\nprint(greet)",
        "detail": "basic.Functions.fun",
        "documentation": {}
    },
    {
        "label": "fun",
        "kind": 2,
        "importPath": "basic.Functions.funProgramming",
        "description": "basic.Functions.funProgramming",
        "peekOfCode": "def fun():\n    print(\"Hello world\")\na = fun\na()\n#output: Hello World",
        "detail": "basic.Functions.funProgramming",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.Functions.funProgramming",
        "description": "basic.Functions.funProgramming",
        "peekOfCode": "a = fun\na()\n#output: Hello World",
        "detail": "basic.Functions.funProgramming",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "basic.Functions.lamdaFunction",
        "description": "basic.Functions.lamdaFunction",
        "peekOfCode": "def multiply(a, b):\n    return a * b\nans= multiply(5, 7)\nprint(ans) #output: 35\nadd = lambda x, y: x +y\nresult = add(3, 5)\nprint(result) #output: 8",
        "detail": "basic.Functions.lamdaFunction",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 5,
        "importPath": "basic.Functions.lamdaFunction",
        "description": "basic.Functions.lamdaFunction",
        "peekOfCode": "add = lambda x, y: x +y\nresult = add(3, 5)\nprint(result) #output: 8",
        "detail": "basic.Functions.lamdaFunction",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "basic.Functions.lamdaFunction",
        "description": "basic.Functions.lamdaFunction",
        "peekOfCode": "result = add(3, 5)\nprint(result) #output: 8",
        "detail": "basic.Functions.lamdaFunction",
        "documentation": {}
    },
    {
        "label": "multipl",
        "kind": 2,
        "importPath": "basic.Functions.mapFunction",
        "description": "basic.Functions.mapFunction",
        "peekOfCode": "def multipl(x): # x here is each element of a, not whole a\n    return 2 * x\nfinal = list(map(multipl, a))\nprint(final) #output: [2, 4, 6, 8, 10]\n# converting into lambda function\nlam_fun = list(map(lambda x:2 * x, a))\nprint(lam_fun)  #output: [2, 4, 6, 8, 10]\n#make every element power 2 of that element\nb = [1, 2, 3, 4, 5]\npower_data = list(map(lambda x: x ** 2, a))",
        "detail": "basic.Functions.mapFunction",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.Functions.mapFunction",
        "description": "basic.Functions.mapFunction",
        "peekOfCode": "a = [1, 2, 3, 4, 5]\ndef multipl(x): # x here is each element of a, not whole a\n    return 2 * x\nfinal = list(map(multipl, a))\nprint(final) #output: [2, 4, 6, 8, 10]\n# converting into lambda function\nlam_fun = list(map(lambda x:2 * x, a))\nprint(lam_fun)  #output: [2, 4, 6, 8, 10]\n#make every element power 2 of that element\nb = [1, 2, 3, 4, 5]",
        "detail": "basic.Functions.mapFunction",
        "documentation": {}
    },
    {
        "label": "final",
        "kind": 5,
        "importPath": "basic.Functions.mapFunction",
        "description": "basic.Functions.mapFunction",
        "peekOfCode": "final = list(map(multipl, a))\nprint(final) #output: [2, 4, 6, 8, 10]\n# converting into lambda function\nlam_fun = list(map(lambda x:2 * x, a))\nprint(lam_fun)  #output: [2, 4, 6, 8, 10]\n#make every element power 2 of that element\nb = [1, 2, 3, 4, 5]\npower_data = list(map(lambda x: x ** 2, a))\nprint(power_data) #output: [1, 4, 9, 16, 25]",
        "detail": "basic.Functions.mapFunction",
        "documentation": {}
    },
    {
        "label": "lam_fun",
        "kind": 5,
        "importPath": "basic.Functions.mapFunction",
        "description": "basic.Functions.mapFunction",
        "peekOfCode": "lam_fun = list(map(lambda x:2 * x, a))\nprint(lam_fun)  #output: [2, 4, 6, 8, 10]\n#make every element power 2 of that element\nb = [1, 2, 3, 4, 5]\npower_data = list(map(lambda x: x ** 2, a))\nprint(power_data) #output: [1, 4, 9, 16, 25]",
        "detail": "basic.Functions.mapFunction",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "basic.Functions.mapFunction",
        "description": "basic.Functions.mapFunction",
        "peekOfCode": "b = [1, 2, 3, 4, 5]\npower_data = list(map(lambda x: x ** 2, a))\nprint(power_data) #output: [1, 4, 9, 16, 25]",
        "detail": "basic.Functions.mapFunction",
        "documentation": {}
    },
    {
        "label": "power_data",
        "kind": 5,
        "importPath": "basic.Functions.mapFunction",
        "description": "basic.Functions.mapFunction",
        "peekOfCode": "power_data = list(map(lambda x: x ** 2, a))\nprint(power_data) #output: [1, 4, 9, 16, 25]",
        "detail": "basic.Functions.mapFunction",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.loops and conditionals.conditionals",
        "description": "basic.loops and conditionals.conditionals",
        "peekOfCode": "a = 10\nif a == 10:\n    print(\"The value of a is 10\")\n#output : The value of a is 10\nb = 0 #0 is False in python\nif b:\n    print(\"b has value\")\nif 456:\n    print(\"b has value and also it is TRUE\") #output: b has value and also it is TRUE\nif ['ram', 2]:",
        "detail": "basic.loops and conditionals.conditionals",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "basic.loops and conditionals.conditionals",
        "description": "basic.loops and conditionals.conditionals",
        "peekOfCode": "b = 0 #0 is False in python\nif b:\n    print(\"b has value\")\nif 456:\n    print(\"b has value and also it is TRUE\") #output: b has value and also it is TRUE\nif ['ram', 2]:\n    print(\"the list is TRUE\") #output: the list is TRUE\nif a > 10:\n    print(\"yes\")\nelse:",
        "detail": "basic.loops and conditionals.conditionals",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.loops and conditionals.loops",
        "description": "basic.loops and conditionals.loops",
        "peekOfCode": "a = [4, 5, 6]\nfor num in a:\n    print(num)\n#output: \n#4\n#5\n#6\nname = 'RAM'\nfor char in name:\n    print(char)",
        "detail": "basic.loops and conditionals.loops",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "basic.loops and conditionals.loops",
        "description": "basic.loops and conditionals.loops",
        "peekOfCode": "name = 'RAM'\nfor char in name:\n    print(char)\n#output:\n#R\n#A\n#m\nfor num in range(1, 5): #5 is excluded\n    print(num)\n#output",
        "detail": "basic.loops and conditionals.loops",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "basic.loops and conditionals.loops",
        "description": "basic.loops and conditionals.loops",
        "peekOfCode": "z = [i for i in range(1, 6)]\nprint(z)\n#output: [1, 2, 3, 4, 5]\n#using index to iterate in for loops\nbob = [12, 34, 2]\nfor index, i in enumerate(bob):\n    print(index, i)\n#output: \n#0 12\n#1 34",
        "detail": "basic.loops and conditionals.loops",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "basic.loops and conditionals.loops",
        "description": "basic.loops and conditionals.loops",
        "peekOfCode": "bob = [12, 34, 2]\nfor index, i in enumerate(bob):\n    print(index, i)\n#output: \n#0 12\n#1 34\n#2 2\nt = [2*i for i in range(1, 11)]\nprint(t)\n#output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "detail": "basic.loops and conditionals.loops",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "basic.loops and conditionals.loops",
        "description": "basic.loops and conditionals.loops",
        "peekOfCode": "t = [2*i for i in range(1, 11)]\nprint(t)\n#output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nnumber = list(range(1, 11))\nfor g in number:\n    if g == 6:\n        break\n        #continue\n    print(g, end=\" \")\n    #output break: 1 2 3 4 5",
        "detail": "basic.loops and conditionals.loops",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "basic.loops and conditionals.loops",
        "description": "basic.loops and conditionals.loops",
        "peekOfCode": "number = list(range(1, 11))\nfor g in number:\n    if g == 6:\n        break\n        #continue\n    print(g, end=\" \")\n    #output break: 1 2 3 4 5\n    #output continue: 1 2 3 4 5 7 8 9 10",
        "detail": "basic.loops and conditionals.loops",
        "documentation": {}
    },
    {
        "label": "two_dim_list",
        "kind": 5,
        "importPath": "basic.2Dlist",
        "description": "basic.2Dlist",
        "peekOfCode": "two_dim_list = [[0 for _ in range(col)] for _ in range(row)]\nprint(two_dim_list)\nn = 5\ntable = [i*n for i in range(1, 11)]\nprint(table)\n#output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\ntable_of_table = [[i*n for i in range(1, 11)] for n in range(1, 6)]\nprint(table_of_table)\n#output:\n#[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ",
        "detail": "basic.2Dlist",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "basic.2Dlist",
        "description": "basic.2Dlist",
        "peekOfCode": "n = 5\ntable = [i*n for i in range(1, 11)]\nprint(table)\n#output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\ntable_of_table = [[i*n for i in range(1, 11)] for n in range(1, 6)]\nprint(table_of_table)\n#output:\n#[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n#[2, 4, 6, 8, 10, 12, 14, 16, 18, 20],\n#[3, 6, 9, 12, 15, 18, 21, 24, 27, 30],",
        "detail": "basic.2Dlist",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "basic.2Dlist",
        "description": "basic.2Dlist",
        "peekOfCode": "table = [i*n for i in range(1, 11)]\nprint(table)\n#output: [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\ntable_of_table = [[i*n for i in range(1, 11)] for n in range(1, 6)]\nprint(table_of_table)\n#output:\n#[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n#[2, 4, 6, 8, 10, 12, 14, 16, 18, 20],\n#[3, 6, 9, 12, 15, 18, 21, 24, 27, 30],\n#[4, 8, 12, 16, 20, 24, 28, 32, 36, 40], ",
        "detail": "basic.2Dlist",
        "documentation": {}
    },
    {
        "label": "table_of_table",
        "kind": 5,
        "importPath": "basic.2Dlist",
        "description": "basic.2Dlist",
        "peekOfCode": "table_of_table = [[i*n for i in range(1, 11)] for n in range(1, 6)]\nprint(table_of_table)\n#output:\n#[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n#[2, 4, 6, 8, 10, 12, 14, 16, 18, 20],\n#[3, 6, 9, 12, 15, 18, 21, 24, 27, 30],\n#[4, 8, 12, 16, 20, 24, 28, 32, 36, 40], \n#[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]]",
        "detail": "basic.2Dlist",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.casting",
        "description": "basic.casting",
        "peekOfCode": "a = int(input(\"Enter a number: \"))\nb = int(input(\"Enter second number: \"))\nsum = a + b\nprint(sum)\nc = list((2, 4, 5))\nprint(c) #output: [2, 4, 5]",
        "detail": "basic.casting",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "basic.casting",
        "description": "basic.casting",
        "peekOfCode": "b = int(input(\"Enter second number: \"))\nsum = a + b\nprint(sum)\nc = list((2, 4, 5))\nprint(c) #output: [2, 4, 5]",
        "detail": "basic.casting",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "basic.casting",
        "description": "basic.casting",
        "peekOfCode": "sum = a + b\nprint(sum)\nc = list((2, 4, 5))\nprint(c) #output: [2, 4, 5]",
        "detail": "basic.casting",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "basic.casting",
        "description": "basic.casting",
        "peekOfCode": "c = list((2, 4, 5))\nprint(c) #output: [2, 4, 5]",
        "detail": "basic.casting",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "basic.dictionary",
        "description": "basic.dictionary",
        "peekOfCode": "my_dict = {\n    \"name\": \"Ram\",\n    \"age\": 12,\n    \"school\": \"TJMC\",\n    \"age\": 14 #updates the value according to key\n}\nprint(my_dict)\n#output\n#{'name': 'Ram', 'age': 14, 'school': 'TJMC'}",
        "detail": "basic.dictionary",
        "documentation": {}
    },
    {
        "label": "sample_list",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "sample_list = [1, \"hello\", 12.2, True]\n#Accessing Elements in a List:\nprint(sample_list[1]) #output: hello\nprint(sample_list[3]) #output: True\n#Lists support a variety of operations for modification, concatenation, repetition.\n#Modifying \nsample_list[1] = \"Ram\"\nprint(sample_list) #output: [1, 'Ram', 12.2, True]\n#Adding \nsample_list.append(\"Added item\")",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "sample_list[1]",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "sample_list[1] = \"Ram\"\nprint(sample_list) #output: [1, 'Ram', 12.2, True]\n#Adding \nsample_list.append(\"Added item\")\nprint(sample_list) #output: [1, 'Ram', 12.2, True, 'Added item']\n#removing \nremoved_element = sample_list.pop(0) #remove element in 0th index and give the removed element\nprint(sample_list) #output: ['Ram', 12.2, True, 'Added item']\nprint(removed_element) #output: 1\n#slicing",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "removed_element",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "removed_element = sample_list.pop(0) #remove element in 0th index and give the removed element\nprint(sample_list) #output: ['Ram', 12.2, True, 'Added item']\nprint(removed_element) #output: 1\n#slicing\nsliced_data = sample_list[0:2] #get elements from index 0 to 2 (but exclude 2nd index)\nprint(sliced_data) #output: ['Ram', 12.2]\n#concatenation\nnew_list = sample_list + ['a', 'b']\nprint(new_list) #output: ['Ram', 12.2, True, 'Added item', 'a', 'b']\n#repetition",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "sliced_data",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "sliced_data = sample_list[0:2] #get elements from index 0 to 2 (but exclude 2nd index)\nprint(sliced_data) #output: ['Ram', 12.2]\n#concatenation\nnew_list = sample_list + ['a', 'b']\nprint(new_list) #output: ['Ram', 12.2, True, 'Added item', 'a', 'b']\n#repetition\nrepete_list = sample_list * 2\nprint(repete_list) #output: ['Ram', 12.2, True, 'Added item', 'Ram', 12.2, True, 'Added item']       \n#Slicing \na = [12, 34, 45, 65, 23]",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "new_list = sample_list + ['a', 'b']\nprint(new_list) #output: ['Ram', 12.2, True, 'Added item', 'a', 'b']\n#repetition\nrepete_list = sample_list * 2\nprint(repete_list) #output: ['Ram', 12.2, True, 'Added item', 'Ram', 12.2, True, 'Added item']       \n#Slicing \na = [12, 34, 45, 65, 23]\nprint(a[1:5:2]) #output: [34, 65]\nb = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(b[::2]) #Starts from the beginning (0), ends at the end (10), and selects every second element (1, 3, 5, 7, 9).",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "repete_list",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "repete_list = sample_list * 2\nprint(repete_list) #output: ['Ram', 12.2, True, 'Added item', 'Ram', 12.2, True, 'Added item']       \n#Slicing \na = [12, 34, 45, 65, 23]\nprint(a[1:5:2]) #output: [34, 65]\nb = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(b[::2]) #Starts from the beginning (0), ends at the end (10), and selects every second element (1, 3, 5, 7, 9).\n#output: [1, 3, 5, 7, 9]",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "a = [12, 34, 45, 65, 23]\nprint(a[1:5:2]) #output: [34, 65]\nb = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(b[::2]) #Starts from the beginning (0), ends at the end (10), and selects every second element (1, 3, 5, 7, 9).\n#output: [1, 3, 5, 7, 9]",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "basic.list",
        "description": "basic.list",
        "peekOfCode": "b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(b[::2]) #Starts from the beginning (0), ends at the end (10), and selects every second element (1, 3, 5, 7, 9).\n#output: [1, 3, 5, 7, 9]",
        "detail": "basic.list",
        "documentation": {}
    },
    {
        "label": "sample_list",
        "kind": 5,
        "importPath": "basic.list_method",
        "description": "basic.list_method",
        "peekOfCode": "sample_list = ['a', 'b', 'c', 1, 12.2, \"hello\"]\n#length of a list\nprint(len(sample_list)) #output: 6\n#Append an element\nsample_list.append(\"World\")\nprint(sample_list) #output: ['a', 'b', 'c', 1, 12.2, 'hello', 'World']\n#Remove an element by value\nsample_list.remove(\"hello\")\nprint(sample_list) #output: ['a', 'b', 'c', 1, 12.2, 'World']\n#sort elements",
        "detail": "basic.list_method",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "basic.list_method",
        "description": "basic.list_method",
        "peekOfCode": "my_list = [1, 5, 12, 55, 23]\nmy_list.sort()\nprint(my_list) #output: [1, 5, 12, 23, 55]\n#reverse \nanother_list = [1, 23, 56, 7, 23]\nanother_list.reverse()\nprint(another_list) #output: [23, 7, 56, 23, 1]",
        "detail": "basic.list_method",
        "documentation": {}
    },
    {
        "label": "another_list",
        "kind": 5,
        "importPath": "basic.list_method",
        "description": "basic.list_method",
        "peekOfCode": "another_list = [1, 23, 56, 7, 23]\nanother_list.reverse()\nprint(another_list) #output: [23, 7, 56, 23, 1]",
        "detail": "basic.list_method",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.print",
        "description": "basic.print",
        "peekOfCode": "a = 30\nb = 47\nprint(\"The two numbers are {} and {}.\".format(a, b))\n#output: The two numbers are 30 and 47.\n# f strings\nprint(f\"The two numbers are {a} and {b}.\")\n#output: The two numbers are 30 and 47.",
        "detail": "basic.print",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "basic.print",
        "description": "basic.print",
        "peekOfCode": "b = 47\nprint(\"The two numbers are {} and {}.\".format(a, b))\n#output: The two numbers are 30 and 47.\n# f strings\nprint(f\"The two numbers are {a} and {b}.\")\n#output: The two numbers are 30 and 47.",
        "detail": "basic.print",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "a = \"  2 3 4 5 6  \"\nprint(a.strip()) #output: 2 3 4 5 6\n#split\n#breaks the string according to space and creats a list\nb = \"2 4 5 6\"\nli = b.split(\" \")\nprint(li) #output: ['2', '4', '5', '6']\n#apply the int function to every element of the list\nli = list(map(int, li))\nprint(li) #output: [2, 4, 5, 6]",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "b = \"2 4 5 6\"\nli = b.split(\" \")\nprint(li) #output: ['2', '4', '5', '6']\n#apply the int function to every element of the list\nli = list(map(int, li))\nprint(li) #output: [2, 4, 5, 6]\nprint(sum(li)) #output: 17\n#input into list\nuser = input(\"Enter a number: \")\nprint(\"This is a number: \" + user)",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "li = b.split(\" \")\nprint(li) #output: ['2', '4', '5', '6']\n#apply the int function to every element of the list\nli = list(map(int, li))\nprint(li) #output: [2, 4, 5, 6]\nprint(sum(li)) #output: 17\n#input into list\nuser = input(\"Enter a number: \")\nprint(\"This is a number: \" + user)\nuser = user.split(\" \")",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "li = list(map(int, li))\nprint(li) #output: [2, 4, 5, 6]\nprint(sum(li)) #output: 17\n#input into list\nuser = input(\"Enter a number: \")\nprint(\"This is a number: \" + user)\nuser = user.split(\" \")\nprint(user)\nli = list(map(int, user))\nprint(li)",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "user = input(\"Enter a number: \")\nprint(\"This is a number: \" + user)\nuser = user.split(\" \")\nprint(user)\nli = list(map(int, user))\nprint(li)\n#output: \n#Enter a number: 1 2 3 4\n#This is a number: 1 2 3 4\n#['1', '2', '3', '4']",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "user = user.split(\" \")\nprint(user)\nli = list(map(int, user))\nprint(li)\n#output: \n#Enter a number: 1 2 3 4\n#This is a number: 1 2 3 4\n#['1', '2', '3', '4']\n#[1, 2, 3, 4]",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "basic.split_strip_join",
        "description": "basic.split_strip_join",
        "peekOfCode": "li = list(map(int, user))\nprint(li)\n#output: \n#Enter a number: 1 2 3 4\n#This is a number: 1 2 3 4\n#['1', '2', '3', '4']\n#[1, 2, 3, 4]",
        "detail": "basic.split_strip_join",
        "documentation": {}
    },
    {
        "label": "mixed_tuple",
        "kind": 5,
        "importPath": "basic.tuples",
        "description": "basic.tuples",
        "peekOfCode": "mixed_tuple = (1, \"ram\", 12.2, (\"nested tuple0\",\"nested tuple1\" ))\nprint(mixed_tuple)\n#Accessing element in tuple\nprint(mixed_tuple[0]) #output: 1\nprint(mixed_tuple[3]) #output: ('nested tuple0', 'nested tuple1')\n#concatenation \ntuple1 = (1, 2, 3)\ntuple2 = ('a', 'b', 'c')\nconcatenated_tuple = tuple1 + tuple2\nprint(concatenated_tuple) #output: (1, 2, 3, 'a', 'b', 'c')",
        "detail": "basic.tuples",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "basic.tuples",
        "description": "basic.tuples",
        "peekOfCode": "tuple1 = (1, 2, 3)\ntuple2 = ('a', 'b', 'c')\nconcatenated_tuple = tuple1 + tuple2\nprint(concatenated_tuple) #output: (1, 2, 3, 'a', 'b', 'c')\n#Repetition\nrepeated_tuple = tuple1 * 3\nprint(repeated_tuple) #output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n#counting occurance\nwhere_tuple = (1, 2, 3, 2, 4, 4, 2)\n#count occurance of value",
        "detail": "basic.tuples",
        "documentation": {}
    },
    {
        "label": "tuple2",
        "kind": 5,
        "importPath": "basic.tuples",
        "description": "basic.tuples",
        "peekOfCode": "tuple2 = ('a', 'b', 'c')\nconcatenated_tuple = tuple1 + tuple2\nprint(concatenated_tuple) #output: (1, 2, 3, 'a', 'b', 'c')\n#Repetition\nrepeated_tuple = tuple1 * 3\nprint(repeated_tuple) #output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n#counting occurance\nwhere_tuple = (1, 2, 3, 2, 4, 4, 2)\n#count occurance of value\nprint(where_tuple.count(2)) #output: 3",
        "detail": "basic.tuples",
        "documentation": {}
    },
    {
        "label": "concatenated_tuple",
        "kind": 5,
        "importPath": "basic.tuples",
        "description": "basic.tuples",
        "peekOfCode": "concatenated_tuple = tuple1 + tuple2\nprint(concatenated_tuple) #output: (1, 2, 3, 'a', 'b', 'c')\n#Repetition\nrepeated_tuple = tuple1 * 3\nprint(repeated_tuple) #output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n#counting occurance\nwhere_tuple = (1, 2, 3, 2, 4, 4, 2)\n#count occurance of value\nprint(where_tuple.count(2)) #output: 3\n#find index of a value",
        "detail": "basic.tuples",
        "documentation": {}
    },
    {
        "label": "repeated_tuple",
        "kind": 5,
        "importPath": "basic.tuples",
        "description": "basic.tuples",
        "peekOfCode": "repeated_tuple = tuple1 * 3\nprint(repeated_tuple) #output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n#counting occurance\nwhere_tuple = (1, 2, 3, 2, 4, 4, 2)\n#count occurance of value\nprint(where_tuple.count(2)) #output: 3\n#find index of a value\nprint(where_tuple.index(3)) #output: 2",
        "detail": "basic.tuples",
        "documentation": {}
    },
    {
        "label": "where_tuple",
        "kind": 5,
        "importPath": "basic.tuples",
        "description": "basic.tuples",
        "peekOfCode": "where_tuple = (1, 2, 3, 2, 4, 4, 2)\n#count occurance of value\nprint(where_tuple.count(2)) #output: 3\n#find index of a value\nprint(where_tuple.index(3)) #output: 2",
        "detail": "basic.tuples",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "basic.while",
        "description": "basic.while",
        "peekOfCode": "a = 5\nwhile a > 0:\n    print(a)\n    a = a - 1",
        "detail": "basic.while",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "OOP.class",
        "description": "OOP.class",
        "peekOfCode": "class Animal:\n    species = \"Cat\"\n    what_type = \"Mammal\"\n    food_choice = \"Carnivorous\"\nlion = Animal()\nlion.food_choice = \"herbs\"\nind = lion.food_choice\nprint(ind) #output: herbs",
        "detail": "OOP.class",
        "documentation": {}
    },
    {
        "label": "lion",
        "kind": 5,
        "importPath": "OOP.class",
        "description": "OOP.class",
        "peekOfCode": "lion = Animal()\nlion.food_choice = \"herbs\"\nind = lion.food_choice\nprint(ind) #output: herbs",
        "detail": "OOP.class",
        "documentation": {}
    },
    {
        "label": "lion.food_choice",
        "kind": 5,
        "importPath": "OOP.class",
        "description": "OOP.class",
        "peekOfCode": "lion.food_choice = \"herbs\"\nind = lion.food_choice\nprint(ind) #output: herbs",
        "detail": "OOP.class",
        "documentation": {}
    },
    {
        "label": "ind",
        "kind": 5,
        "importPath": "OOP.class",
        "description": "OOP.class",
        "peekOfCode": "ind = lion.food_choice\nprint(ind) #output: herbs",
        "detail": "OOP.class",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "OOP.constructor",
        "description": "OOP.constructor",
        "peekOfCode": "class Human:\n    # Overriding\n    def __init__(self, name, age):  #magic function and we are overriding \n        self.age = age\n        self.name = name\nram = Human(\"Ram\", 24)\ngita = Human(\"Gita\", 21)\nprint(ram.name) #Output: Ram\nprint(gita.age) #Output: 21",
        "detail": "OOP.constructor",
        "documentation": {}
    },
    {
        "label": "ram",
        "kind": 5,
        "importPath": "OOP.constructor",
        "description": "OOP.constructor",
        "peekOfCode": "ram = Human(\"Ram\", 24)\ngita = Human(\"Gita\", 21)\nprint(ram.name) #Output: Ram\nprint(gita.age) #Output: 21",
        "detail": "OOP.constructor",
        "documentation": {}
    },
    {
        "label": "gita",
        "kind": 5,
        "importPath": "OOP.constructor",
        "description": "OOP.constructor",
        "peekOfCode": "gita = Human(\"Gita\", 21)\nprint(ram.name) #Output: Ram\nprint(gita.age) #Output: 21",
        "detail": "OOP.constructor",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "OOP.decorators",
        "description": "OOP.decorators",
        "peekOfCode": "class Human:\n    population = 0     #static variables : common for all objecrs of that class\n    def __init__(self, name, age):  \n        self.age = age\n        self.name = name\n        #when a new human comes, increase the population\n        Human.population += 1\n    @staticmethod #this is called a decorator\n        #used to modify behaviour of a function \n    def fun():",
        "detail": "OOP.decorators",
        "documentation": {}
    },
    {
        "label": "ram",
        "kind": 5,
        "importPath": "OOP.decorators",
        "description": "OOP.decorators",
        "peekOfCode": "ram = Human(\"Ram\", 23)\ndata = ram.fun()\nprint(data)",
        "detail": "OOP.decorators",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "OOP.decorators",
        "description": "OOP.decorators",
        "peekOfCode": "data = ram.fun()\nprint(data)",
        "detail": "OOP.decorators",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "OOP.ex",
        "description": "OOP.ex",
        "peekOfCode": "class Human:\n    population = 0     #static variables : common for all objecrs of that class\n    def __init__(self, name, age):  \n        self.age = age\n        self.name = name\n        #when a new human comes, increase the population\n        Human.population += 1\nram = Human(\"Ram\", 23)\nshyam = Human(\"Shyam\", 12)\nprint(ram.population)",
        "detail": "OOP.ex",
        "documentation": {}
    },
    {
        "label": "ram",
        "kind": 5,
        "importPath": "OOP.ex",
        "description": "OOP.ex",
        "peekOfCode": "ram = Human(\"Ram\", 23)\nshyam = Human(\"Shyam\", 12)\nprint(ram.population)",
        "detail": "OOP.ex",
        "documentation": {}
    },
    {
        "label": "shyam",
        "kind": 5,
        "importPath": "OOP.ex",
        "description": "OOP.ex",
        "peekOfCode": "shyam = Human(\"Shyam\", 12)\nprint(ram.population)",
        "detail": "OOP.ex",
        "documentation": {}
    },
    {
        "label": "cc",
        "kind": 2,
        "importPath": "OOP.ex1",
        "description": "OOP.ex1",
        "peekOfCode": "def cc():\n    num = 40\n    print(\"number is: \", num)\nprint(cc())",
        "detail": "OOP.ex1",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "OOP.ex1",
        "description": "OOP.ex1",
        "peekOfCode": "num = 10\ndef cc():\n    num = 40\n    print(\"number is: \", num)\nprint(cc())",
        "detail": "OOP.ex1",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "OOP.inherit",
        "description": "OOP.inherit",
        "peekOfCode": "class Parent:\n    f = 80\n    def __init__(self, value):\n        self.value = value\nclass Child(Parent):\n    def __init__(self, value, name):\n        super().__init__(value)\n        self.name = name\nobj = Child(67, \"RAM\")\ndata = obj.f, obj.value, obj.name",
        "detail": "OOP.inherit",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "OOP.inherit",
        "description": "OOP.inherit",
        "peekOfCode": "class Child(Parent):\n    def __init__(self, value, name):\n        super().__init__(value)\n        self.name = name\nobj = Child(67, \"RAM\")\ndata = obj.f, obj.value, obj.name\nprint(data) #output: (80, 67, 'RAM')",
        "detail": "OOP.inherit",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "OOP.inherit",
        "description": "OOP.inherit",
        "peekOfCode": "obj = Child(67, \"RAM\")\ndata = obj.f, obj.value, obj.name\nprint(data) #output: (80, 67, 'RAM')",
        "detail": "OOP.inherit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "OOP.inherit",
        "description": "OOP.inherit",
        "peekOfCode": "data = obj.f, obj.value, obj.name\nprint(data) #output: (80, 67, 'RAM')",
        "detail": "OOP.inherit",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "OOP.oop",
        "description": "OOP.oop",
        "peekOfCode": "class Human:\n    age = 0\n    name = \"Ram\"\nhuman_obj = Human() \nhuman2_obj = Human()\nhuman_obj.age = 21\nind = human2_obj.age\n# whenever we create an object, a constructor is called automatically\n# constructor is a function\nprint(human_obj.name,human2_obj.age) #output: Ram 0",
        "detail": "OOP.oop",
        "documentation": {}
    },
    {
        "label": "human_obj",
        "kind": 5,
        "importPath": "OOP.oop",
        "description": "OOP.oop",
        "peekOfCode": "human_obj = Human() \nhuman2_obj = Human()\nhuman_obj.age = 21\nind = human2_obj.age\n# whenever we create an object, a constructor is called automatically\n# constructor is a function\nprint(human_obj.name,human2_obj.age) #output: Ram 0\nprint(human_obj.age) #output: 0\nprint(human_obj.name) #output: Ram\nprint (ind) #output: 21",
        "detail": "OOP.oop",
        "documentation": {}
    },
    {
        "label": "human2_obj",
        "kind": 5,
        "importPath": "OOP.oop",
        "description": "OOP.oop",
        "peekOfCode": "human2_obj = Human()\nhuman_obj.age = 21\nind = human2_obj.age\n# whenever we create an object, a constructor is called automatically\n# constructor is a function\nprint(human_obj.name,human2_obj.age) #output: Ram 0\nprint(human_obj.age) #output: 0\nprint(human_obj.name) #output: Ram\nprint (ind) #output: 21",
        "detail": "OOP.oop",
        "documentation": {}
    },
    {
        "label": "human_obj.age",
        "kind": 5,
        "importPath": "OOP.oop",
        "description": "OOP.oop",
        "peekOfCode": "human_obj.age = 21\nind = human2_obj.age\n# whenever we create an object, a constructor is called automatically\n# constructor is a function\nprint(human_obj.name,human2_obj.age) #output: Ram 0\nprint(human_obj.age) #output: 0\nprint(human_obj.name) #output: Ram\nprint (ind) #output: 21",
        "detail": "OOP.oop",
        "documentation": {}
    },
    {
        "label": "ind",
        "kind": 5,
        "importPath": "OOP.oop",
        "description": "OOP.oop",
        "peekOfCode": "ind = human2_obj.age\n# whenever we create an object, a constructor is called automatically\n# constructor is a function\nprint(human_obj.name,human2_obj.age) #output: Ram 0\nprint(human_obj.age) #output: 0\nprint(human_obj.name) #output: Ram\nprint (ind) #output: 21",
        "detail": "OOP.oop",
        "documentation": {}
    },
    {
        "label": "fun",
        "kind": 2,
        "importPath": "OOP.scoping",
        "description": "OOP.scoping",
        "peekOfCode": "def fun():\n    a = 10\n    print(a)\nprint(fun()) #output: 10\n#print(a) --cannot access from outside\nz = 20 #this is global \ndef fun1():\n    z = 60 #this is local to function fun1\n    z = z + 20\n    print(z)",
        "detail": "OOP.scoping",
        "documentation": {}
    },
    {
        "label": "fun1",
        "kind": 2,
        "importPath": "OOP.scoping",
        "description": "OOP.scoping",
        "peekOfCode": "def fun1():\n    z = 60 #this is local to function fun1\n    z = z + 20\n    print(z)\nprint(fun1()) #output: 80\n#we can access but cannot change directly\nprint(z) #output: 20\nx = 50\ndef c():\n    x = 10 # this is local to c",
        "detail": "OOP.scoping",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 2,
        "importPath": "OOP.scoping",
        "description": "OOP.scoping",
        "peekOfCode": "def c():\n    x = 10 # this is local to c\n    #this x = 10, this is enclosed to c\n    def d():\n        x = 40 #this is local to d\n        print(\"x in d() is: \", x)\n        print(\"locals for d are: \", locals())\n    print(\"x in c() is: \", x)\n    return d()\nprint(c()) ",
        "detail": "OOP.scoping",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "OOP.scoping",
        "description": "OOP.scoping",
        "peekOfCode": "z = 20 #this is global \ndef fun1():\n    z = 60 #this is local to function fun1\n    z = z + 20\n    print(z)\nprint(fun1()) #output: 80\n#we can access but cannot change directly\nprint(z) #output: 20\nx = 50\ndef c():",
        "detail": "OOP.scoping",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "OOP.scoping",
        "description": "OOP.scoping",
        "peekOfCode": "x = 50\ndef c():\n    x = 10 # this is local to c\n    #this x = 10, this is enclosed to c\n    def d():\n        x = 40 #this is local to d\n        print(\"x in d() is: \", x)\n        print(\"locals for d are: \", locals())\n    print(\"x in c() is: \", x)\n    return d()",
        "detail": "OOP.scoping",
        "documentation": {}
    }
]